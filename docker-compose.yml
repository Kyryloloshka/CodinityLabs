services:
  postgres:
    image: postgres:16-alpine
    container_name: kpi-postgres
    environment:
      POSTGRES_DB: kpi_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - kpi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d kpi_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Frontend client
  client:
    build:
      context: ./apps/client
      dockerfile: Dockerfile
    container_name: client
    ports:
      - "4200:4200"
    networks:
      - kpi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4200/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - NODE_ENV=production
      - NITRO_HOST=0.0.0.0
      - NITRO_PORT=4200

  api-gateway:
    build:
      context: ./apps/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - assignment-service
    networks:
      - kpi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - NODE_ENV=production
      - PORT=3000
      - AUTH_SERVICE_URL=http://auth-service:8100
      - ASSIGNMENT_SERVICE_URL=http://assignment-service:3002

  auth-service:
    build:
      context: ./apps/auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "8100:8100"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kpi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@kpi-postgres:5432/kpi_db

  assignment-service:
    build:
      context: ./apps/assignment-service
      dockerfile: Dockerfile
    container_name: assignment-service
    ports:
      - "8200:8200"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - kpi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8200/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@kpi-postgres:5432/kpi_db
      - PORT=8200

  checker-service:
    build:
      context: ./apps/checker-service
      dockerfile: Dockerfile
    container_name: checker-service
    ports:
      - "8300:8300"
    networks:
      - kpi-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8300/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - NODE_ENV=production
      - PORT=8300

networks:
  kpi-network:
    driver: bridge

volumes:
  postgres_data: 