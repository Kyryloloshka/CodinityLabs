// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Assignment {
  id          String      @id @default(uuid())
  title       String
  description String
  difficulty  Int
  deadline    DateTime
  teacherId   String      // ID викладача, який створив завдання
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  testCases   TestCase[]
  submissions Submission[]
  settings    AssignmentSettings?

  @@map("assignments")
}

model AssignmentSettings {
  id                    String   @id @default(uuid())
  assignmentId          String   @unique
  timeout               Int      @default(2000) // Таймаут в мілісекундах (200мс-5с)
  maxAttempts           Int?     // Максимальна кількість спроб (null = необмежено)
  passingThreshold      Float    @default(80.0) // Поріг проходження тесту в відсотках
  allowPartialScore     Boolean  @default(true) // Дозволити часткові бали
  strictMode            Boolean  @default(false) // Строгий режим (всі тести мають пройти)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  assignment           Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@map("assignment_settings")
}

model TestCase {
  id           String   @id @default(uuid())
  input        String
  expected     String
  description  String
  isPublic     Boolean  @default(true) // Чи тест видимий студентам
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("test_cases")
}

model Submission {
  id           String   @id @default(uuid())
  userId       String
  assignmentId String
  code         String
  language     String?  // Мова програмування
  eslintReport Json?
  testResults  Json?
  score        Float?
  status       SubmissionStatus @default(PENDING)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

enum SubmissionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
} 